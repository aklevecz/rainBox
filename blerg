<script>

			var container, stats;
			var camera, scene, renderer;
            var particleMaterial;
            var controls;

			var raycaster;
			var mouse;

			var objects = [];

			init();
			animate();

			function init() {

				

				container = document.createElement( 'div' );
				document.body.appendChild( container );


				camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 10000 );
                camera.position.z = 5000;
                controls = new THREE.OrbitControls( camera );
				console.log(controls)
				controls.target = new THREE.Vector3(0,0,0);
				controls.minDistance = 100;
				controls.maxZoom = 100;
                console.log(camera);
                


				scene = new THREE.Scene();
				//scene.background = new THREE.Color( 0x000000 );
				console.log(scene);
				var geometry = new THREE.BoxGeometry( 100, 100, 100 );

				for ( var i = 0; i < 10; i ++ ) {

					var object = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff, opacity: 0.5 } ) );
					object.position.x = Math.random() * 8000 - 4000;
					object.position.y = Math.random() * 8000 - 4000;
					object.position.z = Math.random() * 8000 - 4000;

					object.scale.x = Math.random() * 2 + 1;
					object.scale.y = Math.random() * 2 + 1;
					object.scale.z = Math.random() * 2 + 1;

					object.rotation.x = Math.random() * 2 * Math.PI;
					object.rotation.y = Math.random() * 2 * Math.PI;
					object.rotation.z = Math.random() * 2 * Math.PI;

					scene.add( object );

					objects.push( object );

				}

				var PI2 = Math.PI * 2;
				particleMaterial = new THREE.SpriteCanvasMaterial( {

					color: 0xFFFFFF,
					program: function ( context ) {

						context.beginPath();
						context.arc( 0, 0, 0.5, 0, PI2, true );
						context.fill();

					}

				} );

				//

				raycaster = new THREE.Raycaster();
				mouse = new THREE.Vector2();

				renderer = new THREE.WebGLRenderer({ alpha: true } );
				//renderer.setClearColor(new THREE.Color(0x000, 1.0));
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				container.appendChild( renderer.domElement );
			
				stats = new Stats();
				container.appendChild( stats.dom );

				//POSTPROCESSING SHIT
				composer = new THREE.EffectComposer( renderer );

				texturePass = new THREE.TexturePass();
				composer.addPass( texturePass );

				var textureLoader = new THREE.TextureLoader();
				textureLoader.load("hardwood2_diffuse.jpg", function( map ){
					texturePass.map = map;
				})
				texturePass.renderToScreen = true;
				console.log(texturePass);


				renderPass = new THREE.RenderPass( scene, camera );
				renderPass.clear = true;
				composer.addPass( renderPass );
				var copyPass = new THREE.ShaderPass( THREE.CopyShader );
				copyPass.renderToScreen = true;
				composer.addPass( copyPass );

				document.addEventListener( 'mousedown', onDocumentMouseDown, false );
				document.addEventListener( 'touchstart', onDocumentTouchStart, false );

				//

				window.addEventListener( 'resize', onWindowResize, false );

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			function onDocumentTouchStart( event ) {

				event.preventDefault();

				event.clientX = event.touches[0].clientX;
				event.clientY = event.touches[0].clientY;
				onDocumentMouseDown( event );

			}

			function onDocumentMouseDown( event ) {

				event.preventDefault();

				mouse.x = ( event.clientX / renderer.domElement.clientWidth ) * 2 - 1;
				mouse.y = - ( event.clientY / renderer.domElement.clientHeight ) * 2 + 1;

				raycaster.setFromCamera( mouse, camera );

				var intersects = raycaster.intersectObjects( objects );
				
				var distance = raycaster.ray.origin.distanceTo( intersects[0].point );
				

				if ( intersects.length > 0 && distance < 2000 ) {

					intersects[ 0 ].object.material.color.setHex( Math.random() * 0xffffff );

				}
			}

			//

			function animate() {

				requestAnimationFrame( animate );

				render();
                stats.update();
                controls.update();


			}

			var radius = 600;
			var theta = 0;

			function render() {

				theta += 0.1;

				for (var i = 0; i < objects.length ; i++){
					objects[i].rotation.y += Math.sin(Math.random()/20);
					objects[i].rotation.x += Math.cos(Math.random())/200;
				}
				if (camera.position.z < 100) {
					camera.position.z = camera.position.z;
				}
				renderPass.enabled = true;

				composer.render();	

			}

		</script>